<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTO Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="sharing.entity.notifycation">
	<insert id="addNotifycation" keyColumn="id"  parameterType="sharing.entity.notifycation.Notifycation" useGeneratedKeys="true" keyProperty="id">
		insert into notifycation(noticeUserId,noticeFromAccusationId,noticeFromDynamicId,noticeFromCommentId,noticeFromLikeId,noticeContent,date) values(#{noticeUserId},#{noticeFromAccusationId},#{noticeFromDynamicId},#{noticeFromCommentId},#{noticeFromLikeId},#{noticeContent},#{date})
	</insert>
	<select id="findCountOfNotifycationNotRead" resultType="java.lang.Long">
		select count(id) from notifycation where notifycation.noticeUserId=#{userId}
	</select>
	<resultMap type="sharing.entity.user.User" id="UserNameAndId1">
		<result property="id" column="accusationUserId"/>
		<result property="name" column="accusationUserName"/>
	</resultMap>
	<resultMap type="sharing.entity.user.User" id="UserNameAndId2">
		<result property="id" column="accusationedUserId"/>
		<result property="name" column="accusationedUserName"/>
	</resultMap>
	<resultMap type="sharing.entity.dynamic.Dynamic" id="DynamicId">
		<result property="id" column="accusationedDynamicId"/>
		<result property="content" column="accusationedDynamicContent"/>
	</resultMap>
	<resultMap type="sharing.entity.comment.Comment" id="CommentId">
		<result property="id" column="accusationedCommentId"/>
		<result property="content" column="accusationedCommentContent"/>
	</resultMap>
	<resultMap type="sharing.entity.accusation.Accusation" id="AccusationBaseInfo">
		<result property="id" column="noticeFromAccusationId"/>
		<result property="accusationedRemark" column="accusationedRemark"/>
		<result property="accusationedDate" column="accusationedDate"/>
		<result property="isRead" column="accusationIsRead"/>
		<association property="accusationUser" column="accusationUserId" javaType="sharing.entity.user.User"  resultMap="UserNameAndId1"/>
		<association property="accusationedUser" column="accusationedUserId" javaType="sharing.entity.user.User"  resultMap="UserNameAndId2"/>
		<association property="accusationedDynamic" column="accusationedDynamicId" javaType="sharing.entity.dynamic.Dynamic"  resultMap="DynamicId"/>
		<association property="accusationedComment" column="accusationedCommentId" javaType="sharing.entity.comment.Comment"  resultMap="CommentId"/>
	</resultMap>
	<resultMap type="sharing.entity.user.User" id="NoticeUserNameAndId">
		<result property="id" column="noticeUserId"/>
		<result property="name" column="noticeUserName"/>
	</resultMap>
	<resultMap  type="sharing.entity.user.User" id="LikeUserNameAndId">
		<result property="id" column="likeUserId"/>
		<result property="name" column="likeUserName"/>
	</resultMap>
	<resultMap type="sharing.entity.user.User" id="LikeDynamicUserNameAndId">
		<result property="id" column="likeDynamicUserId" />
		<result property="name" column="likeDynamicUserName" />
	</resultMap>
	<resultMap type="sharing.entity.dynamic.Dynamic" id="LikeDynamicBaseInfo">
		<result property="id" column="likeDynamicId" />
		<result property="content" column="likeDynamicContent" />
		<result property="publishTime" column="likeDynamicPublicshTime" />
		<result property="likeNum" column="likeDynamicLikeNum" />
		<result property="dislikeNum" column="likeDynamicDislikeNum" />
		<association property="user" column="likeDynamicUserId" javaType="sharing.entity.user.User" resultMap="LikeDynamicUserNameAndId"></association>
	</resultMap>
	<resultMap type="sharing.entity.user.User" id="noticeFromCommentDynamicUser">
		<result property="id" column="likeDynamicUserId" />
		<result property="name" column="noticeFromCommentDynamicUserName" />
	</resultMap>
	<resultMap type="sharing.entity.dynamic.Dynamic" id="LikeDynamicBaseInfos">
		<result property="id" column="noticeFromCommentDynamicId" />
		<result property="content" column="noticeFromCommentDynamicContent" />
		<result property="publishTime" column="noticeFromCommentDynamicPublicshTime" />
		<result property="likeNum" column="noticeFromCommentDynamicLikeNum" />
		<result property="dislikeNum" column="noticeFromCommentDynamicDislikeNum" />
		<association property="user" column="noticeFromCommentDynamicUserId" javaType="sharing.entity.user.User" resultMap="noticeFromCommentDynamicUser"></association>
	</resultMap>
	<resultMap type="sharing.entity.dynamic.Dynamic" id="DDD">
		<result property="id" column="noticeFromCommentDynamicId" />
		<result property="content" column="noticeFromCommentDynamicContent" />
	</resultMap>
	<resultMap type="sharing.entity.like.Like" id="LikeBaseInfo">
		<result property="id" column="noticeFromLikeId"/>
		<result property="clickTime" column="clickTime"/>
		<association property="user" column="likeUserId" javaType="sharing.entity.user.User" resultMap="LikeUserNameAndId"/>
		<association property="dynamic" column="likeDynamicId" javaType="sharing.entity.dynamic.Dynamic"  resultMap="LikeDynamicBaseInfo"/>
	</resultMap>
	<resultMap  type="sharing.entity.user.User" id="fromUserIdAndName">
		<result property="id" column="noticeFromCommentFromUserId"/>
		<result property="name" column="noticeFromCommentFromUserName"/>
	</resultMap>
	<resultMap  type="sharing.entity.user.User" id="toUserIdAndName">
		<result property="id" column="noticeFromCommentToUserId"/>
		<result property="name" column="noticeFromCommentToUserName"/>
	</resultMap>
	<resultMap type="sharing.entity.comment.Comment" id="fatherComment">
		<result property="id" column="noticeFromCommentFatherCommentId"/>
		<result property="content" column="noticeFromCommentFatherCommentContent"/>
		<result property="commentTime" column="noticeFromCommentFatherCommentCommentTime"/>
	</resultMap>
	<resultMap type="sharing.entity.comment.Comment" id="commentBaseInfo">
		<result property="id" column="noticeFromCommentId"/>
		<result property="content" column="noticeFromCommentContent"/>
		<result property="commentTime" column="noticeFromCommentcommentTime"/>
		<association property="dynamic" column="noticeFCDynamicId" javaType="sharing.entity.dynamic.Dynamic">
			<result property="id" column="noticeFCDynamicId"/>
			<result property="content" column="noticeFromCommentDynamicContent"/>
		</association>
		<association property="fromUser" column="noticeFromCommentFromUserId" javaType="sharing.entity.user.User" resultMap="fromUserIdAndName"/>
		<association property="toUser" column="noticeFromCommentToUserId" javaType="sharing.entity.user.User" resultMap="toUserIdAndName"/>
		<association property="fatherComment" column="noticeFromCommentFatherCommentId" javaType="sharing.entity.comment.Comment">
			<result property="id" column="noticeFromCommentFatherCommentId"/>
		</association>
	</resultMap>
	<resultMap type="sharing.entity.notifycation.Notifycation" id="NotifycationBaseInfo">
		<result property="id" column="id"/>
		<result property="noticeContent" column="noticeContent"/>
		<result property="isRead" column="isRead"/>
		<result property="date" column="date"/>
		<association property="noticeUser" javaType="sharing.entity.user.User"  column="noticeUserId" resultMap="NoticeUserNameAndId"/>
		<association property="noticeFromAccusation" javaType="sharing.entity.accusation.Accusation" column="noticeFromAccusationId" resultMap="AccusationBaseInfo"/>
		<association property="noticeFromLike" javaType="sharing.entity.like.Like" column="noticeFromLikeId" resultMap="LikeBaseInfo"></association>
		<association property="noticeFromComment" javaType="sharing.entity.comment.Comment" column="noticeFromCommentId" resultMap="commentBaseInfo"/>
	</resultMap>
	<select id="findUserNotifycationByLimit" resultMap="NotifycationBaseInfo">
		SELECT
			n.id AS id,
			n.noticeContent AS noticeContent,
			n.isRead AS isRead ,
			n.date as date,
			u1.id AS noticeUserId,
			u1. NAME AS noticeUserName,
			a.id AS noticeFromAccusationId,
			a.accusationedRemark,
			a.isRead AS accusationIsRead,
			u2.id AS accusationUserId,
			u2. NAME AS accusationUserName,
			u3.id AS accusationedUserId,
			u3. NAME AS accusationedUserName,
			d1.id AS accusationedDynamicId,d1.content as accusationedDynamicContent,
			c1.id AS accusationedCommentId,c1.content as accusationedCommentContent,
			`like`.id AS noticeFromLikeId,
			`like`.clickTime AS clickTime,
			u4.id AS likeUserId,
			u4. NAME AS likeUserName,
			d2.id AS likeDynamicId,
			d2.content AS likeDynamicContent,
			d2.publishTime AS likeDynamicPublicshTime,
			d2.likeNum AS likeDynamicLikeNum,
			d2.dislikeNum AS likeDynamicDislikeNum,
			u5.id AS likeDynamicUserId,
			u5. NAME AS likeDynamicUserName,
			c2.id AS noticeFromCommentId,
			c2.content AS noticeFromCommentContent,
			c2.commentTime AS noticeFromCommentcommentTime,
			c2.fatherCommentId as noticeFromCommentFatherCommentId,
			d3.id AS noticeFCDynamicId,
			d3.content AS noticeFromCommentDynamicContent,
			d3.publishTime AS noticeFromCommentDynamicPublicshTime,
			d3.likeNum AS noticeFromCommentDynamicLikeNum,
			d3.dislikeNum AS noticeFromCommentDynamicDislikeNum,
			u6.id AS noticeFromCommentDynamicUserId,
			u6. NAME AS noticeFromCommentDynamicUserName,
			u7.id AS noticeFromCommentFromUserId,
			u7. NAME AS noticeFromCommentFromUserName,
			u8.id AS noticeFromCommentToUserId,
			u8. NAME AS noticeFromCommentToUserName,
			c3.id AS noticeFromCommentFatherCommentId,
			c3.content AS noticeFromCommentFatherCommentContent,
			c3.commentTime AS noticeFromCommentFatherCommentCommentTime
		FROM
			notifycation n
		LEFT JOIN USER u1 ON u1.id = n.noticeUserId
		LEFT JOIN accusation a ON n.noticeFromAccusationId = a.id
		LEFT JOIN `user` u2 ON a.accusationUserId = u2.id
		LEFT JOIN `user` u3 ON a.accusationedUserId = u3.id
		LEFT JOIN dynamic d1 ON d1.id = a.accusationedDynamicId
		LEFT JOIN `comment` c1 ON c1.id = a.accusationedCommentId
		LEFT JOIN `like` ON `like`.id = n.noticeFromLikeId
		LEFT JOIN `user` u4 ON u4.id = `like`.userId
		LEFT JOIN dynamic d2 ON d2.id = `like`.dynamicId
		LEFT JOIN `user` u5 ON u5.id = d2.userId
		LEFT JOIN `comment` c2 ON n.noticeFromCommentId = c2.id
		LEFT JOIN dynamic d3 ON d3.id = c2.dynamicId
		LEFT JOIN `user` u6 ON u6.id = d3.userId
		LEFT JOIN `user` u7 ON u7.id = c2.fromUserId
		LEFT JOIN `user` u8 ON u8.id = c2.toUserId
		LEFT JOIN `comment` c3 ON c3.id = c2.fatherCommentId 
		where n.noticeUserId=#{userId} order by n.date desc limit #{startIndex},#{pageSize}
	</select>
	<select id="findTotalOfUserNotifycation" resultType="java.lang.Long">
		select count(id) from notifycation where noticeUserId=#{userId}
	</select>
	<update id="markReaded">
		update notifycation set isRead='是' where id=#{notifycationId}
	</update>
	<select id="findTotalOfAllNotifycation" resultType="java.lang.Long">
		select count(id) from notifycation
	</select>
	<select id="findAllNotifycationByLimit" resultMap="NotifycationBaseInfo">
		SELECT
			n.id AS id,
			n.noticeContent AS noticeContent,
			n.isRead AS isRead ,
			n.date as date,
			u1.id AS noticeUserId,
			u1. NAME AS noticeUserName,
			a.id AS noticeFromAccusationId,
			a.accusationedRemark,
			a.isRead AS accusationIsRead,
			u2.id AS accusationUserId,
			u2. NAME AS accusationUserName,
			u3.id AS accusationedUserId,
			u3. NAME AS accusationedUserName,
			d1.id AS accusationedDynamicId,
			c1.id AS accusationedCommentId,
			`like`.id AS noticeFromLikeId,
			`like`.clickTime AS clickTime,
			u4.id AS likeUserId,
			u4. NAME AS likeUserName,
			d2.id AS likeDynamicId,
			d2.content AS likeDynamicContent,
			d2.publishTime AS likeDynamicPublicshTime,
			d2.likeNum AS likeDynamicLikeNum,
			d2.dislikeNum AS likeDynamicDislikeNum,
			u5.id AS likeDynamicUserId,
			u5. NAME AS likeDynamicUserName,
			c2.id AS noticeFromCommentId,
			c2.content AS noticeFromCommentContent,
			c2.commentTime AS noticeFromCommentcommentTime,
			d3.id AS noticeFromCommentDynamicId,
			d3.content AS noticeFromCommentDynamicContent,
			d3.publishTime AS noticeFromCommentDynamicPublicshTime,
			d3.likeNum AS noticeFromCommentDynamicLikeNum,
			d3.dislikeNum AS noticeFromCommentDynamicDislikeNum,
			u6.id AS noticeFromCommentDynamicUserId,
			u6. NAME AS noticeFromCommentDynamicUserName,
			u7.id AS noticeFromCommentFromUserId,
			u7. NAME AS noticeFromCommentFromUserName,
			u8.id AS noticeFromCommentToUserId,
			u8. NAME AS noticeFromCommentToUserName,
			c3.id AS noticeFromCommentFatherCommentId,
			c3.content AS noticeFromCommentFatherCommentContent,
			c3.commentTime AS noticeFromCommentFatherCommentCommentTime
		FROM
			notifycation n
		LEFT JOIN USER u1 ON u1.id = n.noticeUserId
		LEFT JOIN accusation a ON n.noticeFromAccusationId = a.id
		LEFT JOIN `user` u2 ON a.accusationUserId = u2.id
		LEFT JOIN `user` u3 ON a.accusationedUserId = u3.id
		LEFT JOIN dynamic d1 ON d1.id = a.accusationedDynamicId
		LEFT JOIN `comment` c1 ON c1.id = a.accusationedCommentId
		LEFT JOIN `like` ON `like`.id = n.noticeFromLikeId
		LEFT JOIN `user` u4 ON u4.id = `like`.userId
		LEFT JOIN dynamic d2 ON d2.id = `like`.dynamicId
		LEFT JOIN `user` u5 ON u5.id = d2.userId
		LEFT JOIN `comment` c2 ON n.noticeFromCommentId = c2.id
		LEFT JOIN dynamic d3 ON d3.id = c2.dynamicId
		LEFT JOIN `user` u6 ON u6.id = d3.userId
		LEFT JOIN `user` u7 ON u7.id = c2.fromUserId
		LEFT JOIN `user` u8 ON u8.id = c2.toUserId
		LEFT JOIN `comment` c3 ON c3.id = c2.fatherCommentId 
		order by n.date desc limit #{startIndex},#{pageSize}
	</select>
</mapper>